{-# LANGUAGE OverloadedStrings, TypeFamilies, QuasiQuotes,
             TemplateHaskell, GADTs, FlexibleInstances,
             MultiParamTypeClasses, DeriveDataTypeable,
             GeneralizedNewtypeDeriving, ViewPatterns, EmptyDataDecls #-}
import Yesod
import Database.Persist.Postgresql
import Data.Text
import Control.Monad.Logger (runStdoutLoggingT)

data Pagina = Pagina{connPool :: ConnectionPool}

instance Yesod Pagina

share [mkPersist sqlSettings, mkMigrate "migrateAll"] [persistLowerCase|
Clientes json
   nome Text
   deriving Show

Produtoz json
   nome Text
   valor Double
   deriving Show
   
ClientesProdutos json
   clid ClientesId
   prid ProdutozId
   UniqueClientesProdutos clid prid
|]

mkYesod "Pagina" [parseRoutes|
/cadastro UserR GET POST
/cadastro/action/#ClientesId ActionR GET PUT DELETE
/produto ProdutoR GET POST
/venda VendaR POST
/venda/check/#ClientesId VendaCliR GET
|]

instance YesodPersist Pagina where
   type YesodPersistBackend Pagina = SqlBackend
   runDB f = do
       master <- getYesod
       let pool = connPool master
       runSqlPool f pool
------------------------------------------------------
getUserR :: Handler ()
getUserR = do
    allClientes <- runDB $ selectList [] [Asc ClientesNome]
    sendResponse (object [pack "data" .= fmap toJSON allClientes])
    
postUserR :: Handler ()
postUserR = do
    clientes <- requireJsonBody :: Handler Clientes
    runDB $ insert clientes
    sendResponse (object [pack "resp" .= pack "CREATED"])

getProdutoR :: Handler ()
getProdutoR = do
    allProd <- runDB $ selectList [] [Asc ProdutozValor]
    sendResponse (object [pack "data" .= fmap toJSON allProd])
    
postProdutoR :: Handler ()
postProdutoR = do
    prod <- requireJsonBody :: Handler Produtoz
    runDB $ insert prod
    sendResponse (object [pack "resp" .= pack "CREATED"])

postVendaR :: Handler ()
postVendaR = do
    venda <- requireJsonBody :: Handler ClientesProdutos
    runDB $ insert venda
    sendResponse (object [pack "resp" .= pack "CREATED"])

getVendaCliR :: ClientesId -> Handler ()    
getVendaCliR pid = do
    clis <- runDB $ (rawSql (pack $ "SELECT ??, ?? FROM clientes_produtos  \ 
        \ INNER JOIN clientes_produtos ON produtoz.id=clientes_produtos.id \ 
        \ INNER JOIN clientes ON  clientes.id=clientes_produtos.id \
        \ WHERE clientes.id = " ++ show pid) []) :: Handler [(Entity Produtoz,Entity Clientes)]
    sendResponse (object [pack "data" .= fmap (toJSON . fst) clis])
    
getActionR :: ClientesId -> Handler ()
getActionR pid = do
    cli <- runDB $ get404 pid
    sendResponse $ toJSON cli

deleteActionR :: ClientesId -> Handler ()
deleteActionR pid = do
    runDB $ delete pid
    sendResponse (object [pack "resp" .= pack "DELETED"])
    
putActionR :: ClientesId -> Handler ()
putActionR pid = do
    cli <- requireJsonBody :: Handler Clientes
    runDB $ update pid [ClientesNome =. clientesNome cli]
    sendResponse (object [pack "resp" .= pack "UPDATED"])

connStr = "dbname=dd9en8l5q4hh2a host=ec2-107-21-219-201.compute-1.amazonaws.com user=kpuwtbqndoeyqb password=aCROh525uugAWF1l7kahlNN3E0 port=5432"

main::IO()
main = runStdoutLoggingT $ withPostgresqlPool connStr 10 $ \pool -> liftIO $ do 
       runSqlPersistMPool (runMigration migrateAll) pool
       warp 8080 (Pagina pool)


