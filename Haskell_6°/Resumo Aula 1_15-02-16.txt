sudo apt-get install haskell-platform

ghci -- para entrar no gerenciador

:l Aula1 -- carregar

:r -- para compilar

somarUm . dobro $ 8  -- quando tem ponto ele executa o que tem depois primeiro, e o cifrao substitui parenteses

sum vetor  -> somar vetor

reverse vetor-> tras pra frente

Criar e ordem dos vetores
a :: [Int]
a = [6, 5 .. 1]


w :: [Char]

w = ['A' .. 'Z'] 

virgula no List Compreenshion Ã© filtro.

Aula1.hs 
--------------------------------------------
module Aula1 where


-- Para fazer uma funcao haskell

-- nome x1 x2 x3 x4 ... xn = expressao


-- dobro HAS TYPE Int no parametro e Int na saida

dobro :: Int -> Int
dobro x = 2*x


somarUm :: Int -> Int
somarUm a = a + 1



--O ultimo tiposempre e o da saida


somar :: Int -> Int -> Int
somar x y = x+y


u:: Int

u = 8


--recursividade

foo = foo+1




v :: [Int]
v = [1 .. 10]



a :: [Int]

a = [6, 5 .. 1]


w :: [Char]

w = ['A' .. 'Z']



-- List Compreenshions

-- virgula condicao para filtrar

-- [expressao | lista de iteracao, filtro, filtro, ... ]


todosPares :: Int -> [Int]
todosPares n = [x | x <- [0 .. n], mod x 2 == 0]


-- O dobro de todos os numeros de 0 a n maiores que 12 e menores que 142

todos n = [ x*2 | x <- [0 .. n], x > 12, x < 142 ]